Graphics Feature Status
=======================
*   Canvas: Software only. Hardware acceleration disabled
*   Direct Rendering Display Compositor: Disabled
*   Compositing: Software only. Hardware acceleration disabled
*   Multiple Raster Threads: Disabled
*   OpenGL: Disabled
*   Rasterization: Software only. Hardware acceleration disabled
*   Raw Draw: Disabled
*   Skia Graphite: Disabled
*   Video Decode: Software only. Hardware acceleration disabled
*   Video Encode: Software only. Hardware acceleration disabled
*   Vulkan: Disabled
*   WebGL: Software only, hardware acceleration unavailable
*   WebGL2: Software only, hardware acceleration unavailable
*   WebGPU: Software only, hardware acceleration unavailable
*   WebNN: Software only, hardware acceleration unavailable

Version Information
===================
Data exported              : 2025-07-06T21:35:35.732Z
Chrome version             : Chrome/137.0.7151.120
Operating system           : Windows NT 10.0.19045
Software rendering list URL: https://chromium.googlesource.com/chromium/src/+/707269b903b9d66dcfc06ea5101eec3cf7cdb12b/gpu/config/software_rendering_list.json
Driver bug list URL        : https://chromium.googlesource.com/chromium/src/+/707269b903b9d66dcfc06ea5101eec3cf7cdb12b/gpu/config/gpu_driver_bug_list.json
ANGLE commit id            : df9c59dcacff
2D graphics backend        : Skia/137 0dfd95a49aed617f242c8b06dd5b255d1cb07776
Command Line               : "C:\Program Files\Google\Chrome\Application\chrome.exe" --user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.7204.96 Safari/537.36" --lang=en-US,en;q=0.9 --window-size=1920,1080 --disable-webrtc --disable-accelerated-2d-canvas --disable-background-networking --disable-background-timer-throttling --disable-client-side-phishing-detection --disable-hang-monitor --disable-popup-blocking --disable-default-apps --no-default-browser-check --no-first-run --flag-switches-begin --flag-switches-end

Driver Information
==================
Initialization time             : 119
In-process GPU                  : false
Skia Backend                    : GaneshGL
Passthrough Command Decoder     : true
Sandboxed                       : true
GPU0                            : VENDOR= 0x1414, DEVICE=0x008c [Microsoft Basic Render Driver], LUID={0,23290}, DRIVER_VENDOR=Google, DRIVER_VERSION=10.0.19041.5794
GPU1                            : VENDOR= 0x1414, DEVICE=0x008c [Microsoft Basic Render Driver], LUID={0,23479}, DRIVER_VERSION=10.0.19041.5794
Optimus                         : false
AMD switchable                  : false
Desktop compositing             : Aero Glass
Direct composition              : false
Supports overlays               : false
YUY2 overlay support            : NONE
NV12 overlay support            : NONE
BGRA8 overlay support           : NONE
RGB10A2 overlay support         : NONE
P010 overlay support            : NONE
DirectML feature level          : Not supported
Driver D3D12 feature level      : D3D 12.1
Driver Vulkan API version       : Not supported
Pixel shader version            : 1.00
Vertex shader version           : 1.00
Max. MSAA samples               : 4
Machine model name              : 
Machine model version           : 
GL implementation parts         : (gl=egl-angle,angle=swiftshader)
Display type                    : ANGLE_SWIFTSHADER
GL_VENDOR                       : Google Inc. (Google)
GL_RENDERER                     : ANGLE (Google, Vulkan 1.3.0 (SwiftShader Device (Subzero) (0x0000C0DE)), SwiftShader driver-5.0.0)
GL_VERSION                      : OpenGL ES 2.0.0 (ANGLE 2.1.25345 git hash: df9c59dcacff)
GL_EXTENSIONS                   : GL_AMD_performance_monitor GL_ANGLE_base_vertex_base_instance_shader_builtin GL_ANGLE_blob_cache GL_ANGLE_client_arrays GL_ANGLE_compressed_texture_etc GL_ANGLE_depth_texture GL_ANGLE_framebuffer_blit GL_ANGLE_framebuffer_multisample GL_ANGLE_get_image GL_ANGLE_get_serialized_context_string GL_ANGLE_get_tex_level_parameter GL_ANGLE_instanced_arrays GL_ANGLE_memory_object_flags GL_ANGLE_memory_size GL_ANGLE_multi_draw GL_ANGLE_pack_reverse_row_order GL_ANGLE_polygon_mode GL_ANGLE_program_binary_readiness_query GL_ANGLE_program_cache_control GL_ANGLE_read_only_depth_stencil_feedback_loops GL_ANGLE_relaxed_vertex_attribute_type GL_ANGLE_request_extension GL_ANGLE_rgbx_internal_format GL_ANGLE_robust_client_memory GL_ANGLE_robust_fragment_shader_output GL_ANGLE_robust_resource_initialization GL_ANGLE_texture_compression_dxt3 GL_ANGLE_texture_compression_dxt5 GL_ANGLE_texture_usage GL_ANGLE_translated_shader_source GL_ANGLE_vulkan_image GL_APPLE_clip_distance GL_ARM_rgba8 GL_ARM_shader_framebuffer_fetch GL_ARM_shader_framebuffer_fetch_depth_stencil GL_CHROMIUM_bind_generates_resource GL_CHROMIUM_bind_uniform_location GL_CHROMIUM_color_buffer_float_rgb GL_CHROMIUM_color_buffer_float_rgba GL_CHROMIUM_copy_compressed_texture GL_CHROMIUM_copy_texture GL_CHROMIUM_lose_context GL_EXT_EGL_image_external_wrap_modes GL_EXT_base_instance GL_EXT_blend_minmax GL_EXT_buffer_storage GL_EXT_clear_texture GL_EXT_clip_control GL_EXT_color_buffer_half_float GL_EXT_compressed_ETC1_RGB8_sub_texture GL_EXT_copy_image GL_EXT_debug_label GL_EXT_debug_marker GL_EXT_depth_clamp GL_EXT_discard_framebuffer GL_EXT_disjoint_timer_query GL_EXT_draw_buffers GL_EXT_draw_elements_base_vertex GL_EXT_float_blend GL_EXT_frag_depth GL_EXT_instanced_arrays GL_EXT_map_buffer_range GL_EXT_memory_object GL_EXT_multi_draw_indirect GL_EXT_occlusion_query_boolean GL_EXT_polygon_offset_clamp GL_EXT_read_format_bgra GL_EXT_robustness GL_EXT_sRGB GL_EXT_sRGB_write_control GL_EXT_semaphore GL_EXT_separate_shader_objects GL_EXT_shader_framebuffer_fetch GL_EXT_shader_framebuffer_fetch_non_coherent GL_EXT_shader_non_constant_global_initializers GL_EXT_shader_texture_lod GL_EXT_shadow_samplers GL_EXT_texture_border_clamp GL_EXT_texture_compression_bptc GL_EXT_texture_compression_dxt1 GL_EXT_texture_compression_rgtc GL_EXT_texture_compression_s3tc_srgb GL_EXT_texture_filter_anisotropic GL_EXT_texture_format_BGRA8888 GL_EXT_texture_mirror_clamp_to_edge GL_EXT_texture_rg GL_EXT_texture_sRGB_decode GL_EXT_texture_storage GL_EXT_texture_type_2_10_10_10_REV GL_EXT_unpack_subimage GL_KHR_blend_equation_advanced GL_KHR_debug GL_KHR_robust_buffer_access_behavior GL_KHR_robustness GL_KHR_texture_compression_astc_ldr GL_NV_depth_buffer_float2 GL_NV_fence GL_NV_framebuffer_blit GL_NV_pack_subimage GL_NV_pixel_buffer_object GL_NV_polygon_mode GL_NV_read_depth GL_NV_read_depth_stencil GL_NV_read_stencil GL_OES_EGL_image GL_OES_EGL_image_external GL_OES_EGL_sync GL_OES_compressed_EAC_R11_signed_texture GL_OES_compressed_EAC_R11_unsigned_texture GL_OES_compressed_EAC_RG11_signed_texture GL_OES_compressed_EAC_RG11_unsigned_texture GL_OES_compressed_ETC1_RGB8_texture GL_OES_compressed_ETC2_RGB8_texture GL_OES_compressed_ETC2_RGBA8_texture GL_OES_compressed_ETC2_punchthroughA_RGBA8_texture GL_OES_compressed_ETC2_punchthroughA_sRGB8_alpha_texture GL_OES_compressed_ETC2_sRGB8_alpha8_texture GL_OES_compressed_ETC2_sRGB8_texture GL_OES_copy_image GL_OES_depth24 GL_OES_depth32 GL_OES_depth_texture GL_OES_depth_texture_cube_map GL_OES_draw_elements_base_vertex GL_OES_element_index_uint GL_OES_fbo_render_mipmap GL_OES_get_program_binary GL_OES_mapbuffer GL_OES_packed_depth_stencil GL_OES_primitive_bounding_box GL_OES_required_internalformat GL_OES_rgb8_rgba8 GL_OES_sample_shading GL_OES_standard_derivatives GL_OES_surfaceless_context GL_OES_texture_3D GL_OES_texture_border_clamp GL_OES_texture_float GL_OES_texture_float_linear GL_OES_texture_half_float GL_OES_texture_half_float_linear GL_OES_texture_npot GL_OES_vertex_array_object GL_OES_vertex_half_float
Disabled Extensions             : 
Disabled WebGL Extensions       : 
Window system binding vendor    : Google Inc. (Google)
Window system binding version   : 1.5 (ANGLE 2.1.25345 git hash: df9c59dcacff)
Window system binding extensions: EGL_EXT_create_context_robustness EGL_ANGLE_surface_orientation EGL_KHR_create_context EGL_KHR_image EGL_KHR_image_base EGL_EXT_image_gl_colorspace EGL_KHR_gl_colorspace EGL_KHR_gl_texture_2D_image EGL_KHR_gl_texture_cubemap_image EGL_KHR_gl_renderbuffer_image EGL_KHR_get_all_proc_addresses EGL_KHR_fence_sync EGL_KHR_wait_sync EGL_ANGLE_create_context_webgl_compatibility EGL_CHROMIUM_create_context_bind_generates_resource EGL_KHR_swap_buffers_with_damage EGL_EXT_pixel_format_float EGL_KHR_surfaceless_context EGL_ANGLE_display_texture_share_group EGL_ANGLE_display_semaphore_share_group EGL_ANGLE_create_context_client_arrays EGL_ANGLE_program_cache_control EGL_ANGLE_robust_resource_initialization EGL_ANGLE_create_context_extensions_enabled EGL_ANDROID_blob_cache EGL_ANDROID_recordable EGL_ANGLE_create_context_backwards_compatible EGL_KHR_no_config_context EGL_IMG_context_priority EGL_KHR_create_context_no_error EGL_KHR_reusable_sync EGL_EXT_buffer_age EGL_ANGLE_create_surface_swap_interval EGL_ANGLE_vulkan_image EGL_KHR_partial_update EGL_ANGLE_global_fence_sync EGL_ANGLE_memory_usage_report
Direct rendering version        : unknown
Reset notification strategy     : 0x8252
GPU process crash count         : 0
gfx::BufferFormats supported for allocation and texturing: R_8: not supported,  R_16: not supported,  RG_88: not supported,  RG_1616: not supported,  BGR_565: not supported,  RGBA_4444: not supported,  RGBX_8888: not supported,  RGBA_8888: not supported,  BGRX_8888: not supported,  BGRA_1010102: not supported,  RGBA_1010102: not supported,  BGRA_8888: not supported,  RGBA_F16: not supported,  YVU_420: not supported,  YUV_420_BIPLANAR: not supported,  YUVA_420_TRIPLANAR: not supported,  P010: not supported

Problems Detected
=================
*   WebGPU has been disabled via blocklist or the command line.
    Disabled Features: webgpu

*   WebGL2 has been disabled via blocklist or the command line.
    Disabled Features: webgl2

*   Accelerated rasterization has been disabled, either via blocklist, about:flags or the command line.
    Disabled Features: rasterization

*   Accelerated video encode has been disabled, either via blocklist, about:flags or the command line.
    Disabled Features: video_encode

*   Accelerated video decode has been disabled, either via blocklist, about:flags or the command line.
    Disabled Features: video_decode

*   WebGL has been disabled via blocklist or the command line.
    Disabled Features: webgl

*   Gpu compositing has been disabled, either via blocklist, about:flags or the command line. The browser will fall back to software compositing and hardware acceleration will be unavailable.
    Disabled Features: gpu_compositing

*   Accelerated 2D canvas is unavailable: either disabled via blocklist or the command line.
    Disabled Features: 2d_canvas

ANGLE Features
==============
*   allowCompressedFormats (Frontend workarounds): Enabled

*   alwaysEnableEmulatedMultidrawExtensions (Frontend workarounds): Disabled

*   alwaysRunLinkSubJobsThreaded (Frontend features): Enabled

*   cacheCompiledShader (Frontend features): Enabled

*   compileJobIsThreadSafe (Frontend features): Enabled

*   disableAnisotropicFiltering (Frontend workarounds): Disabled

*   disableProgramBinary (Frontend features): Disabled

*   disableProgramCaching (Frontend features): Disabled

*   disableProgramCachingForTransformFeedback (Frontend workarounds): Disabled

*   dumpShaderSource (Frontend features): Disabled

*   dumpTranslatedShaders (Frontend features): Disabled

*   emulatePixelLocalStorage (Frontend features): Enabled

*   enableCaptureLimits (Frontend features): Disabled

*   enableProgramBinaryForCapture (Frontend features): Disabled

*   enableShaderSubstitution (Frontend workarounds): Disabled

*   enableTranslatedShaderSubstitution (Frontend workarounds): Disabled

*   forceDepthAttachmentInitOnClear (Frontend workarounds): Disabled

*   forceFlushAfterDrawcallUsingShadowmap (Frontend workarounds): Disabled

*   forceGlErrorChecking (Frontend features): Disabled

*   forceInitShaderVariables (Frontend features): Disabled

*   forceMinimumMaxVertexAttributes (Frontend features): Disabled

*   forceRobustResourceInit (Frontend features): Disabled

*   linkJobIsThreadSafe (Frontend features): Enabled

*   loseContextOnOutOfMemory (Frontend workarounds): Enabled

*   rejectWebglShadersWithUndefinedBehavior (Frontend workarounds): Enabled

*   singleThreadedTextureDecompression (Frontend workarounds): Disabled

*   uncurrentEglSurfaceUponSurfaceDestroy (Frontend workarounds): Enabled

*   adjustClearColorPrecision (Vulkan workarounds): Disabled

*   allocateNonZeroMemory (Vulkan features): Disabled

*   allowGenerateMipmapWithCompute (Vulkan features): Disabled

*   allowHostImageCopyDespiteNonIdenticalLayout (Vulkan features): Disabled

*   allowMultisampledRenderToTextureEmulation (Vulkan workarounds): Disabled

*   allowPipelineStatisticsForPrimitivesGeneratedQuery (Vulkan workarounds): Disabled

*   appendAliasedMemoryDecorations (Vulkan workarounds): Enabled

*   asyncCommandBufferReset (Vulkan features): Enabled

*   asyncGarbageCleanup (Vulkan features): Enabled

*   avoidInvisibleWindowSwapchainRecreate (Vulkan workarounds): Disabled

*   avoidOpSelectWithMismatchingRelaxedPrecision (Vulkan workarounds): Disabled

*   bottomLeftOriginPresentRegionRectangles (Vulkan workarounds): Disabled

*   bresenhamLineRasterization (Vulkan features): Enabled

*   clDumpVkSpirv (Vulkan features): Disabled

*   clampFragDepth (Vulkan workarounds): Disabled

*   clampPointSize (Vulkan workarounds): Disabled

*   compressVertexData (Vulkan workarounds): Disabled

*   descriptorSetCache (Vulkan features): Disabled

*   destroyOldSwapchainInSharedPresentMode (Vulkan workarounds): Disabled

*   disableDepthStencilResolveThroughAttachment (Vulkan workarounds): Disabled

*   disableFlippingBlitWithCommand (Vulkan workarounds): Disabled

*   disablePipelineCacheLoadForTesting (Vulkan workarounds): Disabled

*   disableSeparateShaderObjects (Vulkan app workarounds): Disabled

*   disallowMixedDepthStencilLoadOpNoneAndLoad (Vulkan workarounds): Disabled

*   doubleDepthBiasConstantFactor (Vulkan workarounds): Disabled

*   eglColorspaceAttributePassthrough (Vulkan features): Disabled

*   emulateAdvancedBlendEquations (Vulkan features): Disabled

*   emulateDithering (Vulkan features): Disabled

*   emulateR32fImageAtomicExchange (Vulkan workarounds): Enabled

*   emulateTransformFeedback (Vulkan features): Enabled

*   emulatedPrerotation180 (Vulkan features): Disabled

*   emulatedPrerotation270 (Vulkan features): Disabled

*   emulatedPrerotation90 (Vulkan features): Disabled

*   enableAdditionalBlendFactorsForDithering (Vulkan app workarounds): Disabled

*   enableAsyncPipelineCacheCompression (Vulkan workarounds): Enabled

*   enableExtraSubmitFence (Vulkan workarounds): Disabled

*   enableMergeClientAttribBuffer (Vulkan features): Disabled

*   enableMultisampledRenderToTexture (Vulkan workarounds): Disabled

*   enableParallelCompileAndLink (Vulkan features): Disabled

*   enablePipelineCacheDataCompression (Vulkan features): Enabled

*   enablePortabilityEnumeration (Vulkan workarounds): Disabled

*   enablePrecisionQualifiers (Vulkan features): Enabled

*   explicitlyCastMediumpFloatTo16Bit (Vulkan workarounds): Disabled

*   explicitlyEnablePerSampleShading (Vulkan workarounds): Enabled

*   exposeES32ForTesting (Vulkan workarounds): Disabled

*   exposeNonConformantExtensionsAndVersions (Vulkan workarounds): Disabled

*   forceContinuousRefreshOnSharedPresent (Vulkan features): Disabled

*   forceD16TexFilter (Vulkan workarounds): Disabled

*   forceDisableFullScreenExclusive (Vulkan workarounds): Disabled

*   forceFallbackFormat (Vulkan workarounds): Disabled

*   forceFragmentShaderPrecisionHighpToMediump (Vulkan workarounds): Disabled

*   forceHostImageCopyForLuma (Vulkan features): Disabled

*   forceMaxUniformBufferSize16KB (Vulkan workarounds): Disabled

*   forceNearestFiltering (Vulkan workarounds): Disabled

*   forceNearestMipFiltering (Vulkan workarounds): Disabled

*   forceSampleUsageForAhbBackedImages (Vulkan app workarounds): Disabled

*   forceSubmitImmutableTextureUpdates (Vulkan app workarounds): Disabled

*   forceTextureLodOffset1 (Vulkan workarounds): Disabled

*   forceTextureLodOffset2 (Vulkan workarounds): Disabled

*   forceTextureLodOffset3 (Vulkan workarounds): Disabled

*   forceTextureLodOffset4 (Vulkan workarounds): Disabled

*   forceWaitForSubmissionToCompleteForQueryResult (Vulkan workarounds): Disabled

*   generateFragmentShadingRateAttchementWithCpu (Vulkan features): Disabled

*   hasBlobCacheThatEvictsOldItemsFirst (Vulkan features): Enabled

*   limitMaxStorageBufferSize (Vulkan workarounds): Disabled

*   limitSampleCountTo2 (Vulkan workarounds): Disabled

*   logMemoryReportCallbacks (Vulkan features): Disabled

*   logMemoryReportStats (Vulkan features): Disabled

*   mapUnspecifiedColorSpaceToPassThrough (Vulkan features): Disabled

*   mergeProgramPipelineCachesToGlobalCache (Vulkan workarounds): Disabled

*   mutableMipmapTextureUpload (Vulkan features): Enabled

*   overrideSurfaceFormatRGB8ToRGBA8 (Vulkan workarounds): Enabled

*   padBuffersToMaxVertexAttribStride (Vulkan workarounds): Disabled

*   permanentlySwitchToFramebufferFetchMode (Vulkan features): Disabled

*   persistentlyMappedBuffers (Vulkan features): Enabled

*   preferAggregateBarrierCalls (Vulkan workarounds): Enabled

*   preferCPUForBufferSubData (Vulkan features): Disabled

*   preferCachedNoncoherentForDynamicStreamBufferUsage (Vulkan features): Disabled

*   preferDeviceLocalMemoryHostVisible (Vulkan features): Enabled

*   preferDoubleBufferSwapchainOnFifoMode (Vulkan features): Disabled

*   preferDrawClearOverVkCmdClearAttachments (Vulkan workarounds): Disabled

*   preferDynamicRendering (Vulkan features): Enabled

*   preferHostCachedForNonStaticBufferUsage (Vulkan features): Disabled

*   preferLinearFilterForYUV (Vulkan features): Disabled

*   preferMSRTSSFlagByDefault (Vulkan features): Disabled

*   preferMonolithicPipelinesOverLibraries (Vulkan workarounds): Disabled

*   preferSkippingInvalidateForEmulatedFormats (Vulkan workarounds): Enabled

*   preferSubmitAtFBOBoundary (Vulkan workarounds): Enabled

*   preferSubmitOnAnySamplesPassedQueryEnd (Vulkan workarounds): Disabled

*   provokingVertex (Vulkan features): Enabled

*   retainSPIRVDebugInfo (Vulkan features): Disabled

*   roundOutputAfterDithering (Vulkan workarounds): Disabled

*   skipPipelineCacheSerialization (Vulkan features): Enabled

*   slowDownMonolithicPipelineCreationForTesting (Vulkan workarounds): Disabled

*   supports16BitInputOutput (Vulkan features): Disabled

*   supports16BitPushConstant (Vulkan features): Disabled

*   supports16BitStorageBuffer (Vulkan features): Disabled

*   supports16BitUniformAndStorageBuffer (Vulkan features): Disabled

*   supports8BitPushConstant (Vulkan features): Disabled

*   supports8BitStorageBuffer (Vulkan features): Disabled

*   supports8BitUniformAndStorageBuffer (Vulkan features): Disabled

*   supportsAndroidHardwareBuffer (Vulkan features): Disabled

*   supportsAndroidNativeFenceSync (Vulkan features): Disabled

*   supportsAngleRgbxInternalFormat (Vulkan features): Enabled

*   supportsAppleClipDistance (Vulkan features): Enabled

*   supportsAstcSliced3d (Vulkan features): Disabled

*   supportsBindMemory2 (Vulkan features): Enabled

*   supportsBlendOperationAdvanced (Vulkan features): Enabled

*   supportsBlendOperationAdvancedCoherent (Vulkan features): Disabled

*   supportsColorWriteEnable (Vulkan features): Disabled

*   supportsComputeTranscodeEtcToBc (Vulkan features): Disabled

*   supportsCustomBorderColor (Vulkan features): Enabled

*   supportsDenormFtzFp16 (Vulkan features): Disabled

*   supportsDenormFtzFp32 (Vulkan features): Disabled

*   supportsDenormFtzFp64 (Vulkan features): Disabled

*   supportsDenormPreserveFp16 (Vulkan features): Disabled

*   supportsDenormPreserveFp32 (Vulkan features): Disabled

*   supportsDenormPreserveFp64 (Vulkan features): Disabled

*   supportsDepthClampZeroOne (Vulkan features): Disabled

*   supportsDepthClipControl (Vulkan features): Enabled

*   supportsDepthStencilIndependentResolveNone (Vulkan features): Enabled

*   supportsDepthStencilResolve (Vulkan features): Enabled

*   supportsDeviceFault (Vulkan features): Disabled

*   supportsDynamicRendering (Vulkan features): Enabled

*   supportsDynamicRenderingLocalRead (Vulkan features): Enabled

*   supportsExtendedDynamicState (Vulkan features): Enabled

*   supportsExtendedDynamicState2 (Vulkan features): Disabled

*   supportsExternalFenceCapabilities (Vulkan features): Enabled

*   supportsExternalFenceFd (Vulkan features): Disabled

*   supportsExternalFormatResolve (Vulkan features): Disabled

*   supportsExternalMemoryDmaBufAndModifiers (Vulkan features): Disabled

*   supportsExternalMemoryFd (Vulkan features): Disabled

*   supportsExternalMemoryFuchsia (Vulkan features): Disabled

*   supportsExternalMemoryHost (Vulkan features): Enabled

*   supportsExternalSemaphoreCapabilities (Vulkan features): Enabled

*   supportsExternalSemaphoreFd (Vulkan features): Disabled

*   supportsExternalSemaphoreFuchsia (Vulkan features): Disabled

*   supportsFormatFeatureFlags2 (Vulkan features): Enabled

*   supportsFoveatedRendering (Vulkan features): Disabled

*   supportsFragmentShaderPixelInterlock (Vulkan features): Disabled

*   supportsFragmentShadingRate (Vulkan features): Disabled

*   supportsFullScreenExclusive (Vulkan features): Disabled

*   supportsGeometryStreamsCapability (Vulkan features): Disabled

*   supportsGetMemoryRequirements2 (Vulkan features): Enabled

*   supportsGraphicsPipelineLibrary (Vulkan features): Enabled

*   supportsHostImageCopy (Vulkan features): Enabled

*   supportsHostQueryReset (Vulkan features): Enabled

*   supportsImage2dViewOf3d (Vulkan features): Disabled

*   supportsImageCompressionControl (Vulkan features): Disabled

*   supportsImageCompressionControlSwapchain (Vulkan features): Disabled

*   supportsImageCubeArray (Vulkan features): Enabled

*   supportsImageFormatList (Vulkan features): Enabled

*   supportsImagelessFramebuffer (Vulkan features): Enabled

*   supportsIncrementalPresent (Vulkan features): Disabled

*   supportsIndexTypeUint8 (Vulkan features): Enabled

*   supportsLegacyDithering (Vulkan features): Disabled

*   supportsLockSurfaceExtension (Vulkan features): Disabled

*   supportsLogicOpDynamicState (Vulkan features): Disabled

*   supportsMaintenance5 (Vulkan features): Disabled

*   supportsMemoryBudget (Vulkan features): Disabled

*   supportsMultiDrawIndirect (Vulkan features): Enabled

*   supportsMultisampledRenderToSingleSampled (Vulkan features): Disabled

*   supportsMultiview (Vulkan features): Enabled

*   supportsPipelineCreationFeedback (Vulkan features): Enabled

*   supportsPipelineProtectedAccess (Vulkan features): Disabled

*   supportsPipelineRobustness (Vulkan features): Enabled

*   supportsPipelineStatisticsQuery (Vulkan features): Disabled

*   supportsPortabilityEnumeration (Vulkan features): Enabled

*   supportsPresentation (Vulkan features): Enabled

*   supportsPrimitiveTopologyListRestart (Vulkan features): Enabled

*   supportsPrimitivesGeneratedQuery (Vulkan features): Disabled

*   supportsProtectedMemory (Vulkan features): Disabled

*   supportsRasterizationOrderAttachmentAccess (Vulkan features): Enabled

*   supportsRenderPassLoadStoreOpNone (Vulkan features): Enabled

*   supportsRenderPassStoreOpNone (Vulkan features): Disabled

*   supportsRenderpass2 (Vulkan features): Enabled

*   supportsRoundingModeRteFp16 (Vulkan features): Disabled

*   supportsRoundingModeRteFp32 (Vulkan features): Disabled

*   supportsRoundingModeRteFp64 (Vulkan features): Disabled

*   supportsRoundingModeRtzFp16 (Vulkan features): Disabled

*   supportsRoundingModeRtzFp32 (Vulkan features): Disabled

*   supportsRoundingModeRtzFp64 (Vulkan features): Disabled

*   supportsSPIRV14 (Vulkan features): Enabled

*   supportsSampler2dViewOf3d (Vulkan features): Disabled

*   supportsSamplerMirrorClampToEdge (Vulkan features): Enabled

*   supportsShaderFloat16 (Vulkan features): Disabled

*   supportsShaderFloat64 (Vulkan features): Disabled

*   supportsShaderFramebufferFetch (Vulkan features): Enabled

*   supportsShaderFramebufferFetchDepthStencil (Vulkan features): Enabled

*   supportsShaderFramebufferFetchNonCoherent (Vulkan features): Enabled

*   supportsShaderInt8 (Vulkan features): Disabled

*   supportsShaderNonSemanticInfo (Vulkan features): Disabled

*   supportsShaderStencilExport (Vulkan features): Disabled

*   supportsSharedPresentableImageExtension (Vulkan features): Disabled

*   supportsSignedZeroInfNanPreserveFp16 (Vulkan features): Enabled

*   supportsSignedZeroInfNanPreserveFp32 (Vulkan features): Enabled

*   supportsSignedZeroInfNanPreserveFp64 (Vulkan features): Enabled

*   supportsSurfaceCapabilities2Extension (Vulkan features): Enabled

*   supportsSurfaceMaintenance1 (Vulkan features): Enabled

*   supportsSurfaceProtectedCapabilitiesExtension (Vulkan features): Disabled

*   supportsSurfaceProtectedSwapchains (Vulkan features): Disabled

*   supportsSurfacelessQueryExtension (Vulkan features): Enabled

*   supportsSwapchainMaintenance1 (Vulkan features): Enabled

*   supportsSwapchainMutableFormat (Vulkan features): Disabled

*   supportsSynchronization2 (Vulkan features): Enabled

*   supportsTextureCompressionAstcHdr (Vulkan features): Disabled

*   supportsTimelineSemaphore (Vulkan features): Enabled

*   supportsTimestampSurfaceAttribute (Vulkan features): Disabled

*   supportsTransformFeedbackExtension (Vulkan features): Disabled

*   supportsUniformBufferStandardLayout (Vulkan features): Enabled

*   supportsVertexInputDynamicState (Vulkan features): Enabled

*   supportsYUVSamplerConversion (Vulkan features): Enabled

*   supportsYuvTarget (Vulkan features): Disabled

*   swapbuffersOnFlushOrFinishWithSingleBuffer (Vulkan features): Disabled

*   syncMonolithicPipelinesToBlobCache (Vulkan workarounds): Disabled

*   useCullModeDynamicState (Vulkan workarounds): Enabled

*   useDepthBiasEnableDynamicState (Vulkan workarounds): Disabled

*   useDepthCompareOpDynamicState (Vulkan workarounds): Enabled

*   useDepthTestEnableDynamicState (Vulkan workarounds): Enabled

*   useDepthWriteEnableDynamicState (Vulkan workarounds): Enabled

*   useDualPipelineBlobCacheSlots (Vulkan features): Disabled

*   useEmptyBlobsToEraseOldPipelineCacheFromBlobCache (Vulkan features): Disabled

*   useFrontFaceDynamicState (Vulkan workarounds): Enabled

*   useMultipleDescriptorsForExternalFormats (Vulkan workarounds): Enabled

*   useNonZeroStencilWriteMaskStaticState (Vulkan workarounds): Disabled

*   usePrimitiveRestartEnableDynamicState (Vulkan workarounds): Disabled

*   useRasterizerDiscardEnableDynamicState (Vulkan workarounds): Disabled

*   useResetCommandBufferBitForSecondaryPools (Vulkan workarounds): Disabled

*   useStencilOpDynamicState (Vulkan workarounds): Enabled

*   useStencilTestEnableDynamicState (Vulkan workarounds): Enabled

*   useVertexInputBindingStrideDynamicState (Vulkan workarounds): Disabled

*   useVkEventForBufferBarrier (Vulkan features): Enabled

*   useVkEventForImageBarrier (Vulkan features): Enabled

*   useVmaForImageSuballocation (Vulkan features): Enabled

*   usesNativeBuiltinClKernel (Vulkan features): Disabled

*   varyingsRequireMatchingPrecisionInSpirv (Vulkan workarounds): Disabled

*   verifyPipelineCacheInBlobCache (Vulkan features): Disabled

*   waitIdleBeforeSwapchainRecreation (Vulkan workarounds): Disabled

*   warmUpPipelineCacheAtLink (Vulkan features): Enabled

*   wrapSwitchInIfTrue (Vulkan workarounds): Disabled

Dawn Info
=========

<CPU>  OpenGLES backend - ANGLE (Google, Vulkan 1.3.0 (SwiftShader Device (Subzero) (0x0000C0DE)), SwiftShader driver-5.0.0) (Compatibility Mode)
-------------------------------------------------------------------------------------------------------------------------------------------------

[WebGPU Status]
---------------
*   Blocklisted - crbug.com/40057808: CPU adapters not fully tested or conformant.

[Adapter Supported Features]
----------------------------
*   texture-compression-bc
*   texture-compression-etc2
*   texture-compression-astc
*   float32blendable
*   dawn-internal-usages
*   dawn-native
*   implicit-device-synchronization
*   angle-texture-sharing
*   dawn-format-capabilities
*   shared-fence-egl-sync

[Enabled Toggle Names]
----------------------
*   lazy_clear_resource_on_first_use: 
    (https://crbug.com/dawn/145):
    Clears resource to zero on first usage. This initializes the resource so
    that no dirty bits from recycled memory is present in the new resource.

*   disable_indexed_draw_buffers: 
    (https://crbug.com/dawn/582):
    Disables the use of indexed draw buffer state which is unsupported on some
    platforms.

*   flush_before_client_wait_sync: 
    (https://crbug.com/dawn/633):
    Call glFlush before glClientWaitSync to work around bugs in the latter

*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   use_placeholder_fragment_in_vertex_only_pipeline: 
    (https://crbug.com/dawn/136):
    Use a placeholder empty fragment shader in vertex only render pipeline.
    This toggle must be enabled for OpenGL ES backend, the Vulkan Backend, and
    serves as a workaround by default enabled on some Metal devices with Intel
    GPU to ensure the depth result is correct.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

*   use_blit_for_buffer_to_stencil_texture_copy: 
    (https://crbug.com/dawn/1389):
    Use a blit instead of a copy command to copy buffer data to the stencil
    aspect of a texture. Works around an issue where stencil writes by copy
    commands are not visible to a render or compute pass.

*   use_blit_for_depth16unorm_texture_to_buffer_copy: 
    (https://crbug.com/dawn/1782):
    Use a blit instead of a copy command to copy depth aspect of a texture to
    a buffer.Workaround for OpenGL and OpenGLES.

*   use_blit_for_depth32float_texture_to_buffer_copy: 
    (https://crbug.com/dawn/1782):
    Use a blit instead of a copy command to copy depth aspect of a texture to
    a buffer.Workaround for OpenGLES.

*   use_blit_for_stencil_texture_to_buffer_copy: 
    (https://crbug.com/dawn/1782):
    Use a blit instead of a copy command to copy stencil aspect of a texture
    to a buffer.Workaround for OpenGLES.

*   use_blit_for_snorm_texture_to_buffer_copy: 
    (https://crbug.com/dawn/1781):
    Use a blit instead of a copy command to copy snorm texture to a
    buffer.Workaround for OpenGLES.

*   use_blit_for_rgb9e5ufloat_texture_copy: 
    (https://crbug.com/dawn/2079):
    Use a blit instead of a copy command to copy rgb9e5ufloat texture to a
    texture or a buffer.Workaround for OpenGLES.

*   use_t2b2t_for_srgb_texture_copy: 
    (https://crbug.com/dawn/2362):
    Use T2B and B2T copies to emulate a T2T copy between sRGB and non-sRGB
    textures.Workaround for OpenGLES.

*   gl_depth_bias_modifier: 
    (https://crbug.com/42241017):
    Empirically some GL drivers select n+1 when a depth value lies between 2^n
    and 2^(n+1), while the WebGPU CTS is expecting n. Scale the depth bias
    value by multiple 0.5 on certain backends to achieve conformant result.

[WebGPU Required Toggles - enabled]
-----------------------------------
*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

<Integrated GPU>  D3D12 backend - Microsoft Basic Render Driver
---------------------------------------------------------------

[WebGPU Status]
---------------
*   Available

[Adapter Supported Features]
----------------------------
*   depth-clip-control
*   depth32float-stencil8
*   timestamp-query
*   texture-compression-bc
*   indirect-first-instance
*   shader-f16
*   rg11b10ufloat-renderable
*   bgra8unorm-storage
*   float32filterable
*   float32blendable
*   clip-distances
*   dual-source-blending
*   subgroups
*   core-features-and-limits
*   dawn-internal-usages
*   dawn-multi-planar-formats
*   dawn-native
*   implicit-device-synchronization
*   unorm16texture-formats
*   snorm16texture-formats
*   multi-planar-render-targets
*   adapter-properties-memory-heaps
*   adapter-properties-d3d
*   dawn-format-capabilities
*   norm16texture-formats
*   shared-texture-memory-dxgi-shared-handle
*   shared-fence-dxgi-shared-handle
*   shader-module-compilation-options
*   flexible-texture-views

[Enabled Toggle Names]
----------------------
*   lazy_clear_resource_on_first_use: 
    (https://crbug.com/dawn/145):
    Clears resource to zero on first usage. This initializes the resource so
    that no dirty bits from recycled memory is present in the new resource.

*   use_d3d12_resource_heap_tier2: 
    (https://crbug.com/dawn/27):
    Enable support for resource heap tier 2. Resource heap tier 2 allows
    mixing of texture and buffers in the same heap. This allows better heap
    re-use and reduces fragmentation.

*   use_d3d12_residency_management: 
    (https://crbug.com/dawn/193):
    Enable residency management. This allows page-in and page-out of resource
    heaps in GPU memory. This component improves overcommitted performance by
    keeping the most recently used resources local to the GPU. Turning this
    component off can cause allocation failures when application memory
    exceeds physical device memory.

*   use_dxc: 
    (https://crbug.com/dawn/402):
    Use DXC instead of FXC for compiling HLSL when both dxcompiler.dll and
    dxil.dll is available.

*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

*   d3d12_use_temp_buffer_in_texture_to_texture_copy_between_different_dimensions: 
    (https://crbug.com/dawn/1216):
    Use an intermediate temporary buffer when copying between textures of
    different dimensions. Force-enabled on D3D12 when the driver does not have
    the TextureCopyBetweenDimensionsSupported feature.

*   apply_clear_big_integer_color_value_with_draw: 
    (https://crbug.com/dawn/537):
    Apply the clear value of the color attachment with a draw call when load
    op is 'clear'. This toggle is enabled by default on D3D12 backends when we
    set large integer values (> 2^24 or < -2^24 for signed integer formats) as
    the clear value of a color attachment with 32-bit integer or unsigned
    integer formats because D3D12 APIs only support using float numbers as
    clear values, while a float number cannot always precisely represent an
    integer that is greater than 2^24 or smaller than -2^24). This toggle is
    also enabled on Intel GPUs on Metal backend due to a driver issue on Intel
    Metal driver.

*   d3d12_use_64kb_alignment_msaa_texture: 
    (https://crbug.com/dawn/282):
    Create MSAA textures with 64KB
    (D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT) alignment.

*   d3d12_create_not_zeroed_heap: 
    (https://crbug.com/dawn/484):
    Create D3D12 heap with D3D12_HEAP_FLAG_CREATE_NOT_ZEROED when it is
    supported. It is safe because in Dawn we always clear the resources
    manually when needed.

*   polyfill_packed_4x8_dot_product: 
    (https://crbug.com/tint/1497):
    Always use the polyfill version of dot4I8Packed() and dot4U8Packed().

*   d3d12_polyfill_pack_unpack_4x8: 
    (https://crbug.com/tint/1497):
    Always use the polyfill version of pack4xI8(), pack4xU8(),
    pack4xI8Clamp(), unpack4xI8() and unpack4xU8() on D3D12 backends. Note
    that these functions are always polyfilled on all other backends right
    now.

[WebGPU Required Toggles - enabled]
-----------------------------------
*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

<Integrated GPU>  D3D11 backend - Microsoft Basic Render Driver
---------------------------------------------------------------

[WebGPU Status]
---------------
*   Blocklisted - crbug.com/41479539: D3D11 backend not fully implemented.

[Adapter Supported Features]
----------------------------
*   depth-clip-control
*   depth32float-stencil8
*   texture-compression-bc
*   rg11b10ufloat-renderable
*   bgra8unorm-storage
*   float32filterable
*   float32blendable
*   clip-distances
*   dual-source-blending
*   core-features-and-limits
*   dawn-internal-usages
*   dawn-multi-planar-formats
*   dawn-native
*   implicit-device-synchronization
*   d3d11multithread-protected
*   unorm16texture-formats
*   snorm16texture-formats
*   multi-planar-format-p010
*   multi-planar-render-targets
*   adapter-properties-memory-heaps
*   adapter-properties-d3d
*   dawn-format-capabilities
*   norm16texture-formats
*   shared-texture-memory-dxgi-shared-handle
*   shared-texture-memory-d3d11texture-2d
*   shared-fence-dxgi-shared-handle
*   shader-module-compilation-options
*   dawn-load-resolve-texture
*   dawn-partial-load-resolve-texture
*   dawn-texel-copy-buffer-row-alignment
*   flexible-texture-views

[Enabled Toggle Names]
----------------------
*   lazy_clear_resource_on_first_use: 
    (https://crbug.com/dawn/145):
    Clears resource to zero on first usage. This initializes the resource so
    that no dirty bits from recycled memory is present in the new resource.

*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

*   apply_clear_big_integer_color_value_with_draw: 
    (https://crbug.com/dawn/537):
    Apply the clear value of the color attachment with a draw call when load
    op is 'clear'. This toggle is enabled by default on D3D12 backends when we
    set large integer values (> 2^24 or < -2^24 for signed integer formats) as
    the clear value of a color attachment with 32-bit integer or unsigned
    integer formats because D3D12 APIs only support using float numbers as
    clear values, while a float number cannot always precisely represent an
    integer that is greater than 2^24 or smaller than -2^24). This toggle is
    also enabled on Intel GPUs on Metal backend due to a driver issue on Intel
    Metal driver.

*   use_blit_for_buffer_to_stencil_texture_copy: 
    (https://crbug.com/dawn/1389):
    Use a blit instead of a copy command to copy buffer data to the stencil
    aspect of a texture. Works around an issue where stencil writes by copy
    commands are not visible to a render or compute pass.

*   use_blit_for_t2b: 
    (https://crbug.com/dawn/348654098):
    Use a compute based blit instead of a copy command to copy texture with
    supported format to a buffer.

*   use_blit_for_b2t: 
    (https://crbug.com/dawn/348653642):
    Use a shader based blit instead of a copy command to copy a buffer to a
    texture with supported format.

[WebGPU Required Toggles - enabled]
-----------------------------------
*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

<CPU>  D3D12 backend - Microsoft Basic Render Driver
----------------------------------------------------

[WebGPU Status]
---------------
*   Blocklisted - crbug.com/40057808: CPU adapters not fully tested or conformant.

[Adapter Supported Features]
----------------------------
*   depth-clip-control
*   depth32float-stencil8
*   timestamp-query
*   texture-compression-bc
*   indirect-first-instance
*   shader-f16
*   rg11b10ufloat-renderable
*   bgra8unorm-storage
*   float32filterable
*   float32blendable
*   clip-distances
*   dual-source-blending
*   subgroups
*   core-features-and-limits
*   dawn-internal-usages
*   dawn-multi-planar-formats
*   dawn-native
*   implicit-device-synchronization
*   unorm16texture-formats
*   snorm16texture-formats
*   multi-planar-render-targets
*   adapter-properties-memory-heaps
*   adapter-properties-d3d
*   dawn-format-capabilities
*   norm16texture-formats
*   shared-texture-memory-dxgi-shared-handle
*   shared-fence-dxgi-shared-handle
*   shader-module-compilation-options
*   flexible-texture-views

[Enabled Toggle Names]
----------------------
*   lazy_clear_resource_on_first_use: 
    (https://crbug.com/dawn/145):
    Clears resource to zero on first usage. This initializes the resource so
    that no dirty bits from recycled memory is present in the new resource.

*   use_d3d12_resource_heap_tier2: 
    (https://crbug.com/dawn/27):
    Enable support for resource heap tier 2. Resource heap tier 2 allows
    mixing of texture and buffers in the same heap. This allows better heap
    re-use and reduces fragmentation.

*   use_d3d12_residency_management: 
    (https://crbug.com/dawn/193):
    Enable residency management. This allows page-in and page-out of resource
    heaps in GPU memory. This component improves overcommitted performance by
    keeping the most recently used resources local to the GPU. Turning this
    component off can cause allocation failures when application memory
    exceeds physical device memory.

*   use_dxc: 
    (https://crbug.com/dawn/402):
    Use DXC instead of FXC for compiling HLSL when both dxcompiler.dll and
    dxil.dll is available.

*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

*   d3d12_use_temp_buffer_in_texture_to_texture_copy_between_different_dimensions: 
    (https://crbug.com/dawn/1216):
    Use an intermediate temporary buffer when copying between textures of
    different dimensions. Force-enabled on D3D12 when the driver does not have
    the TextureCopyBetweenDimensionsSupported feature.

*   apply_clear_big_integer_color_value_with_draw: 
    (https://crbug.com/dawn/537):
    Apply the clear value of the color attachment with a draw call when load
    op is 'clear'. This toggle is enabled by default on D3D12 backends when we
    set large integer values (> 2^24 or < -2^24 for signed integer formats) as
    the clear value of a color attachment with 32-bit integer or unsigned
    integer formats because D3D12 APIs only support using float numbers as
    clear values, while a float number cannot always precisely represent an
    integer that is greater than 2^24 or smaller than -2^24). This toggle is
    also enabled on Intel GPUs on Metal backend due to a driver issue on Intel
    Metal driver.

*   d3d12_use_64kb_alignment_msaa_texture: 
    (https://crbug.com/dawn/282):
    Create MSAA textures with 64KB
    (D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT) alignment.

*   d3d12_create_not_zeroed_heap: 
    (https://crbug.com/dawn/484):
    Create D3D12 heap with D3D12_HEAP_FLAG_CREATE_NOT_ZEROED when it is
    supported. It is safe because in Dawn we always clear the resources
    manually when needed.

*   polyfill_packed_4x8_dot_product: 
    (https://crbug.com/tint/1497):
    Always use the polyfill version of dot4I8Packed() and dot4U8Packed().

*   d3d12_polyfill_pack_unpack_4x8: 
    (https://crbug.com/tint/1497):
    Always use the polyfill version of pack4xI8(), pack4xU8(),
    pack4xI8Clamp(), unpack4xI8() and unpack4xU8() on D3D12 backends. Note
    that these functions are always polyfilled on all other backends right
    now.

[WebGPU Required Toggles - enabled]
-----------------------------------
*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

<CPU>  Vulkan backend - SwiftShader Device (Subzero)
----------------------------------------------------

[WebGPU Status]
---------------
*   Blocklisted - crbug.com/40057808: CPU adapters not fully tested or conformant.

[Adapter Supported Features]
----------------------------
*   depth-clip-control
*   depth32float-stencil8
*   timestamp-query
*   texture-compression-bc
*   texture-compression-etc2
*   texture-compression-astc
*   indirect-first-instance
*   rg11b10ufloat-renderable
*   bgra8unorm-storage
*   float32filterable
*   float32blendable
*   clip-distances
*   subgroups
*   core-features-and-limits
*   dawn-internal-usages
*   dawn-multi-planar-formats
*   dawn-native
*   implicit-device-synchronization
*   transient-attachments
*   unorm16texture-formats
*   adapter-properties-memory-heaps
*   adapter-properties-vk
*   dawn-format-capabilities
*   dawn-load-resolve-texture
*   flexible-texture-views

[Enabled Toggle Names]
----------------------
*   lazy_clear_resource_on_first_use: 
    (https://crbug.com/dawn/145):
    Clears resource to zero on first usage. This initializes the resource so
    that no dirty bits from recycled memory is present in the new resource.

*   use_temporary_buffer_in_texture_to_texture_copy: 
    (https://crbug.com/dawn/42):
    Split texture-to-texture copy into two copies: copy from source texture
    into a temporary buffer, and copy from the temporary buffer into the
    destination texture when copying between compressed textures that don't
    have block-aligned sizes. This workaround is enabled by default on all
    Vulkan drivers to solve an issue in the Vulkan SPEC about the
    texture-to-texture copies with compressed formats. See #1005
    (https://github.com/KhronosGroup/Vulkan-Docs/issues/1005) for more
    details.

*   vulkan_use_d32s8: 
    (https://crbug.com/dawn/286):
    Vulkan mandates support of either D32_FLOAT_S8 or D24_UNORM_S8. When
    available the backend will use D32S8 (toggle to on) but setting the toggle
    to off will make it use the D24S8 format when possible.

*   vulkan_use_s8: 
    (https://crbug.com/dawn/666):
    Vulkan has a pure stencil8 format but it is not universally available.
    When this toggle is on, the backend will use S8 for the stencil8 format,
    otherwise it will fallback to D32S8 or D24S8.

*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   vulkan_use_demote_to_helper_invocation_extension: 
    (https://crbug.com/42250787):
    Sets the use of the vulkan demote to helper extension

*   use_placeholder_fragment_in_vertex_only_pipeline: 
    (https://crbug.com/dawn/136):
    Use a placeholder empty fragment shader in vertex only render pipeline.
    This toggle must be enabled for OpenGL ES backend, the Vulkan Backend, and
    serves as a workaround by default enabled on some Metal devices with Intel
    GPU to ensure the depth result is correct.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

*   use_vulkan_zero_initialize_workgroup_memory_extension: 
    (https://crbug.com/dawn/1302):
    Initialize workgroup memory with OpConstantNull on Vulkan when the Vulkan
    extension VK_KHR_zero_initialize_workgroup_memory is supported.

[WebGPU Required Toggles - enabled]
-----------------------------------
*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

<CPU>  D3D11 backend - Microsoft Basic Render Driver
----------------------------------------------------

[WebGPU Status]
---------------
*   Blocklisted - crbug.com/41479539: D3D11 backend not fully implemented. | crbug.com/40057808: CPU adapters not fully tested or conformant.

[Adapter Supported Features]
----------------------------
*   depth-clip-control
*   depth32float-stencil8
*   texture-compression-bc
*   rg11b10ufloat-renderable
*   bgra8unorm-storage
*   float32filterable
*   float32blendable
*   clip-distances
*   dual-source-blending
*   core-features-and-limits
*   dawn-internal-usages
*   dawn-multi-planar-formats
*   dawn-native
*   implicit-device-synchronization
*   d3d11multithread-protected
*   unorm16texture-formats
*   snorm16texture-formats
*   multi-planar-format-p010
*   multi-planar-render-targets
*   adapter-properties-memory-heaps
*   adapter-properties-d3d
*   dawn-format-capabilities
*   norm16texture-formats
*   shared-texture-memory-dxgi-shared-handle
*   shared-texture-memory-d3d11texture-2d
*   shared-fence-dxgi-shared-handle
*   shader-module-compilation-options
*   dawn-load-resolve-texture
*   dawn-partial-load-resolve-texture
*   dawn-texel-copy-buffer-row-alignment
*   flexible-texture-views

[Enabled Toggle Names]
----------------------
*   lazy_clear_resource_on_first_use: 
    (https://crbug.com/dawn/145):
    Clears resource to zero on first usage. This initializes the resource so
    that no dirty bits from recycled memory is present in the new resource.

*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

*   apply_clear_big_integer_color_value_with_draw: 
    (https://crbug.com/dawn/537):
    Apply the clear value of the color attachment with a draw call when load
    op is 'clear'. This toggle is enabled by default on D3D12 backends when we
    set large integer values (> 2^24 or < -2^24 for signed integer formats) as
    the clear value of a color attachment with 32-bit integer or unsigned
    integer formats because D3D12 APIs only support using float numbers as
    clear values, while a float number cannot always precisely represent an
    integer that is greater than 2^24 or smaller than -2^24). This toggle is
    also enabled on Intel GPUs on Metal backend due to a driver issue on Intel
    Metal driver.

*   use_blit_for_buffer_to_stencil_texture_copy: 
    (https://crbug.com/dawn/1389):
    Use a blit instead of a copy command to copy buffer data to the stencil
    aspect of a texture. Works around an issue where stencil writes by copy
    commands are not visible to a render or compute pass.

*   use_blit_for_t2b: 
    (https://crbug.com/dawn/348654098):
    Use a compute based blit instead of a copy command to copy texture with
    supported format to a buffer.

*   use_blit_for_b2t: 
    (https://crbug.com/dawn/348653642):
    Use a shader based blit instead of a copy command to copy a buffer to a
    texture with supported format.

[WebGPU Required Toggles - enabled]
-----------------------------------
*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

Compositor Information
======================
Tile Update Mode: One-copy
Partial Raster  : Enabled

GpuMemoryBuffers Status
=======================
R_8               : Software only
R_16              : Software only
RG_88             : Software only
RG_1616           : Software only
BGR_565           : Software only
RGBA_4444         : Software only
RGBX_8888         : GPU_READ, SCANOUT
RGBA_8888         : GPU_READ, SCANOUT
BGRX_8888         : GPU_READ, SCANOUT
BGRA_1010102      : Software only
RGBA_1010102      : Software only
BGRA_8888         : GPU_READ, SCANOUT
RGBA_F16          : Software only
YVU_420           : Software only
YUV_420_BIPLANAR  : Software only
YUVA_420_TRIPLANAR: Software only
P010              : Software only

Display(s) Information
======================
Info                          : Display[1646714208] bounds=[0,0 1920x1080], workarea=[0,0 1920x1040], scale=1, rotation=0, panel_rotation=0 external detected
Color space (all)             : {primaries:BT709, transfer:SRGB, matrix:RGB, range:FULL}
Buffer format (all)           : BGRA_8888
Color volume                  : {name:'srgb', r:[0.6400, 0.3300], g:[0.3000, 0.6000], b:[0.1500, 0.0600], w:[0.3127, 0.3290]}
SDR white level in nits       : 203
HDR relative maximum luminance: 1
Bits per color component      : 8
Bits per pixel                : 24
Refresh Rate in Hz            : 64

Video Acceleration Information
==============================
Decoding: 
Encoding:

Vulkan Information
==================

Device Performance Information
==============================
Total Physical Memory (Gb): 5
Total Disk Space (Gb)     : 59
Hardware Concurrency      : 2
System Commit Limit (Gb)  : 7
D3D11 Feature Level       : Unknown
Has Discrete GPU          : unknown
Software Rendering        : Yes

Log Messages
============
GpuProcessHost: The info collection GPU process exited normally. Everything is okay.
[4112:8156:0706/172812.761:ERROR:gpu\command_buffer\service\gles2_cmd_decoder_passthrough.cc:1092] : [GroupMarkerNotSet(crbug.com/242999)!:A0801600A4220000]Automatic fallback to software WebGL has been deprecated. Please use the --enable-unsafe-swiftshader flag to opt in to lower security guarantees for trusted content.
[4112:8156:0706/172812.779:ERROR:gpu\command_buffer\service\gles2_cmd_decoder_passthrough.cc:1092] : [GroupMarkerNotSet(crbug.com/242999)!:A0B01600A4220000]Automatic fallback to software WebGL has been deprecated. Please use the --enable-unsafe-swiftshader flag to opt in to lower security guarantees for trusted content.
[4112:8156:0706/172812.794:ERROR:gpu\command_buffer\service\gles2_cmd_decoder_passthrough.cc:1092] : [GroupMarkerNotSet(crbug.com/242999)!:A0E01600A4220000]Automatic fallback to software WebGL has been deprecated. Please use the --enable-unsafe-swiftshader flag to opt in to lower security guarantees for trusted content.
[4112:8156:0706/172812.812:ERROR:gpu\command_buffer\service\gles2_cmd_decoder_passthrough.cc:1092] : [GroupMarkerNotSet(crbug.com/242999)!:A0101700A4220000]Automatic fallback to software WebGL has been deprecated. Please use the --enable-unsafe-swiftshader flag to opt in to lower security guarantees for trusted content.
GpuProcessHost: The info collection GPU process exited normally. Everything is okay.